/* Return index of matched value in list */
@function -index($list, $value) {
    @for $i from 1 through length($list) {
        @if nth($list, $i) == $value {
            @return $i;
        }
    }

    @return null;
}

@function -z($key, $mod: 0) {

    $index: -index($layers, $key) * 10;

    @if $mod {
        @return $index + $mod;
    }

    @return $index;
}

@function -color($key) {
    @if map-has-key($colors, $key) {
        @return map-get($colors, $key);
    }

    @warn "Unknown `#{$key}` in $colors.";

    @return null;
}

@function -weight($key) {
    @if map-has-key($font-weights, $key) {
        @return map-get($font-weights, $key);
    }

    @warn "Unknown `#{$key}` in $font-weights.";

    @return null;
}

@function -bp($key) {
    @if map-has-key($grid-breakpoints, $key) {
        @return map-get($grid-breakpoints, $key);
    }

    @warn "Unknown `#{$key}` in $breakpoints.";

    @return null;
}

@function svg-url($svg){

    // chunk up string in order to avoid "SystemStackError: stack level too deep"
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk,'"','\'');
        $chunk: str-replace($chunk,'<','%3C');
        $chunk: str-replace($chunk,'>','%3E');
        $chunk: str-replace($chunk,'&','%26');
        $chunk: str-replace($chunk,'#','%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
